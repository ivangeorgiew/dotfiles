snippet cr "React Container" b
import React, { PureComponent as Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import {} from 'prop-types'
import {} from 'react-immutable-proptypes'
import {} from 'actions'
import {} from 'reducers'
import {} from 'components'

class _$1 extends Component {
	render() {
		return (
			$0
		)
	}
}

_$1.propTypes = {
}

export const ${1:`!v expand('%:t:r')`} = connect(
	state => ({
	}),
	dispatch => bindActionCreators({
	}, dispatch)
)(_$1)
endsnippet

snippet ct "React Component" b
import React, { PureComponent as Component } from 'react'
import {} from 'prop-types'
import {} from 'react-immutable-proptypes'

export class ${1:`!v expand('%:t:r')`} extends Component {
	render() {
		return (
			$0
		)
	}
}

$1.propTypes = {
}
endsnippet

snippet cl "console.log"
console.log(${1})
endsnippet

snippet "i(mp)?" "import" !br
import { ${1} } from '${2}/$1'
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
$0
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
$0
}
endsnippet

snippet cwu "componentWillUnmount" b
componentWillUnmount() {
	$0
}
endsnippet

snippet fg "function generator" b
function * ${1} ({ payload: { ${2} } }) {
	try {
		yield put(startLoading({ loader: ${3:DEFAULT}_IS_LOADING }))

		$0
	} catch (error) {
		yield call(handleSagaError, { error })
	} finally {
		yield put(stopLoading({ loader: $3_IS_LOADING }))
	}
}

endsnippet

snippet then "Then" b
this.Then(/^${1}$/, ${2:()} => {
})
endsnippet

snippet when "When" b
this.When(/^${1}$/, ${2:()} => {
})
endsnippet

snippet given "Given" b
this.Given(/^${1}$/, ${2:()} => {
})
endsnippet

snippet wait "browser.waitUntil" b
browser.waitUntil(() => {
	return ${2:browser.isExisting('$0')}
}, TIMEOUT, 'expected ${1:something}')
endsnippet

snippet fn "function"
function $0
endsnippet
